@inherits LayoutComponentBase
@page "/org"
@using LightOps.NeuralLens.Component.OrganizationApiConnector.Codegen
@inject IOrganizationApiClient OrganizationApiClient
@inject NavigationManager NavigationManager

<PageTitle>Organizations</PageTitle>
<MudBreadcrumbs Items="BreadcrumbItems"></MudBreadcrumbs>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">
        Organizations
    </MudText>

    <div class="d-flex mb-2">
        <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Refresh" @onclick="LoadOrganizations" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="StartCreateOrganization">Create new</MudButton>
    </div>

    <MudTable Items="@_organizations" Hover="true" Loading="@(_organizations == null)">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Updated At</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Created At">@context.CreatedAt.ToString("f")</MudTd>
            <MudTd DataLabel="Updated At">@context.UpdatedAt.ToString("f")</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Variant="Variant.Outlined" Color="Color.Default" Icon="@Icons.Material.Filled.RemoveRedEye" Href="@($"/org/{context.Id}")" />
                <MudIconButton Variant="Variant.Outlined" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" @onclick="() => StartEditOrganization(context)" />
                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" @onclick="() => StartDeleteOrganization(context)" />
                <MudPopover Open="@(_organizationToDelete == context)" Class="pa-4" Fixed="true" RelativeWidth="DropdownWidth.Adaptive" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                    <MudText GutterBottom="true">
                        Are you sure you want to delete the organization "@context.Name"?<br />
                        This action cannot be undone.
                    </MudText>
                    <div class="d-flex">
                        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="@CancelDelete">Cancel</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@ConfirmDelete">Delete</MudButton>
                    </div>
                </MudPopover>
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudContainer>

@if (_organizationToEdit != null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudText Typo="Typo.h5" GutterBottom="true">
            @(_organizationToEdit.Id == null ? "Create new organization" : "Edit organization")
        </MudText>
        <MudCard>
            <MudForm Model="@_organizationToEdit" @ref="@_form">
                <MudCardContent>
                    <MudTextField @bind-Value="_organizationToEdit.Name"
                    For="@(() => _organizationToEdit.Name)"
                    Immediate="true"
                    Label="Name"/>

                    <MudTextField @bind-Value="_organizationToEdit.Description"
                    For="@(() => _organizationToEdit.Description)"
                    Immediate="true"
                    Label="Description"/>
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveOrganization">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-2" OnClick="@CancelEditing">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
    </MudContainer>
}

@code {
    private MudForm _form = new();

    private ICollection<OrganizationViewModel>? _organizations;
    private OrganizationViewModel? _organizationToEdit;
    private OrganizationViewModel? _organizationToDelete;

    private List<BreadcrumbItem> BreadcrumbItems =>
    [
        new("Home", href: "/"),
        new("Organizations", href: "/org", disabled: true),
    ];

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganizations();
    }

    private async Task LoadOrganizations()
    {
        _organizations = await OrganizationApiClient.GetOrganizationsAsync();
        StateHasChanged();
    }

    private void StartCreateOrganization()
    {
        _organizationToEdit = new OrganizationViewModel();
    }

    private void StartEditOrganization(OrganizationViewModel organization)
    {
        _organizationToEdit = new OrganizationViewModel
        {
            Id = organization.Id,
            Name = organization.Name,
            Description = organization.Description,
        };
    }

    private async Task SaveOrganization()
    {
        if (_organizationToEdit == null)
        {
            return;
        }

        try 
        {
            if (string.IsNullOrWhiteSpace(_organizationToEdit.Id))
            {
                // Create new organization
                await OrganizationApiClient.CreateOrganizationAsync(new CreateOrganizationRequest 
                { 
                        Name = _organizationToEdit.Name,
                        Description = _organizationToEdit.Description,
                });
            }
            else
            {
                // Update existing organization
                await OrganizationApiClient.UpdateOrganizationAsync(_organizationToEdit.Id, new UpdateOrganizationRequest
                { 
                        Name = _organizationToEdit.Name,
                        Description = _organizationToEdit.Description,
                });
            }

            // Refresh the list
            await LoadOrganizations();

            // Reset editing state
            _organizationToEdit = null;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling (e.g., show error message)
            Console.WriteLine($"Error saving organization: {ex.Message}");
        }
    }

    private void CancelEditing()
    {
        _organizationToEdit = null;
    }

    private void StartDeleteOrganization(OrganizationViewModel organization)
    {
        _organizationToDelete = organization;
    }

    private void CancelDelete()
    {
        _organizationToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (_organizationToDelete == null)
        {
            return;
        }

        try 
        {
            await OrganizationApiClient.DeleteOrganizationAsync(_organizationToDelete.Id);
            
            // Refresh the list
            await LoadOrganizations();

            // Reset delete confirmation state
            _organizationToDelete = null;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling (e.g., show error message)
            Console.WriteLine($"Error deleting organization: {ex.Message}");
        }
    }
}