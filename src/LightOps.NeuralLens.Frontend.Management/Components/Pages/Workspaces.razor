@inherits LayoutComponentBase
@page "/organizations/{organizationId}/workspaces"
@using LightOps.NeuralLens.Component.WorkspaceApiConnector.Codegen
@inject IWorkspaceApiClient WorkspaceApiClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Organization workspaces</PageTitle>
<MudBreadcrumbs Items="BreadcrumbItems"></MudBreadcrumbs>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">
        Organization workspaces
    </MudText>

    <div class="d-flex mb-2">
        <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Refresh" @onclick="LoadWorkspaces" />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="StartCreateWorkspace">Create new</MudButton>
    </div>

    <MudTable Items="@_workspaces" Hover="true" Loading="@(_workspaces == null)">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Updated At</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Created At">@context.CreatedAt.ToString("f")</MudTd>
            <MudTd DataLabel="Updated At">@context.UpdatedAt.ToString("f")</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Variant="Variant.Outlined" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" @onclick="() => StartEditWorkspace(context)" />
                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" @onclick="() => StartDeleteWorkspace(context)" />
                <MudPopover Open="@(_workspaceToDelete == context)" Class="pa-4" Fixed="true" RelativeWidth="DropdownWidth.Adaptive" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                    <MudText GutterBottom="true">
                        Are you sure you want to delete the workspace "@context.Name"?<br />
                        This action cannot be undone.
                    </MudText>
                    <div class="d-flex">
                        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="@CancelDelete">Cancel</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@ConfirmDelete">Delete</MudButton>
                    </div>
                </MudPopover>
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudContainer>

@if (_workspaceToEdit != null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudText Typo="Typo.h5" GutterBottom="true">
            @(_workspaceToEdit.Id == null ? "Create new workspace" : "Edit workspace")
        </MudText>
        <MudCard>
            <MudForm Model="@_workspaceToEdit" @ref="@_form">
                <MudCardContent>
                    <MudTextField @bind-Value="_workspaceToEdit.Name"
                    For="@(() => _workspaceToEdit.Name)"
                    Immediate="true"
                    Label="Name" />

                    <MudTextField @bind-Value="_workspaceToEdit.Description"
                    For="@(() => _workspaceToEdit.Description)"
                    Immediate="true"
                    Label="Description" />
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveWorkspace">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-2" OnClick="@CancelEditing">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
    </MudContainer>
}

@code {
    private MudForm _form = new();

    [Parameter]
    public string? OrganizationId { get; set; }

    private ICollection<WorkspaceViewModel>? _workspaces;
    private WorkspaceViewModel? _workspaceToEdit;
    private WorkspaceViewModel? _workspaceToDelete;

    private List<BreadcrumbItem> BreadcrumbItems =>
    [
        new("Dashboard", href: "/"),
        new("Organizations", href: "/organizations"),
        new(OrganizationId!, href: null, disabled: true),
        new("Workspaces", href: null, disabled: true),
    ];


    protected override async Task OnInitializedAsync()
    {
        await LoadWorkspaces();
    }

    private async Task LoadWorkspaces()
    {
        _workspaces = await WorkspaceApiClient.GetWorkspacesAsync(OrganizationId);
        StateHasChanged();
    }

    private void StartCreateWorkspace()
    {
        _workspaceToEdit = new WorkspaceViewModel();
    }

    private void StartEditWorkspace(WorkspaceViewModel workspace)
    {
        _workspaceToEdit = new WorkspaceViewModel
            {
                Id = workspace.Id,
                Name = workspace.Name,
                Description = workspace.Description,
            };
    }

    private async Task SaveWorkspace()
    {
        if (_workspaceToEdit == null)
        {
            return;
        }

        try
        {
            if (string.IsNullOrWhiteSpace(_workspaceToEdit.Id))
            {
                // Create new workspace
                await WorkspaceApiClient.CreateWorkspaceAsync(OrganizationId, new CreateWorkspaceRequest
                    {
                        Name = _workspaceToEdit.Name,
                        Description = _workspaceToEdit.Description,
                    });
            }
            else
            {
                // Update existing workspace
                await WorkspaceApiClient.UpdateWorkspaceAsync(OrganizationId, _workspaceToEdit.Id, new UpdateWorkspaceRequest
                    {
                        Name = _workspaceToEdit.Name,
                        Description = _workspaceToEdit.Description,
                    });
            }

            // Refresh the list
            await LoadWorkspaces();

            // Reset editing state
            _workspaceToEdit = null;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling (e.g., show error message)
            Console.WriteLine($"Error saving workspace: {ex.Message}");
        }
    }

    private void CancelEditing()
    {
        _workspaceToEdit = null;
    }

    private void StartDeleteWorkspace(WorkspaceViewModel workspace)
    {
        _workspaceToDelete = workspace;
    }

    private void CancelDelete()
    {
        _workspaceToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (_workspaceToDelete == null)
        {
            return;
        }

        try
        {
            await WorkspaceApiClient.DeleteWorkspaceAsync(OrganizationId, _workspaceToDelete.Id);

            // Refresh the list
            await LoadWorkspaces();

            // Reset delete confirmation state
            _workspaceToDelete = null;
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling (e.g., show error message)
            Console.WriteLine($"Error deleting workspace: {ex.Message}");
        }
    }

    private void NavigateToOrganizations()
    {
        NavigationManager.NavigateTo("/organizations");
    }
}